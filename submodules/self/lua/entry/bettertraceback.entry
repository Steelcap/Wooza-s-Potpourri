local format = string.format

local cdata_types = {
	Vector = function(v, literal)
		return format("Vector(%f, %f, %f)", v.x, v.y, v.z)
	end,
	Color = function(c, literal)
		return format("Color(%f, %f, %f, %f)", c.r, c.g, c.b, c.a)
	end,
	Angles = function(a, literal)
		return format("Angles{yaw = %f, pitch = %f, roll = %f}", a.yaw, a.pitch, a.roll)
	end,
	Coords = function(c, literal)
		return CoordsToString(c)
	end
}
local types = {
	string = function(s, literal)
		return literal and format("\"%s\"", s) or s
	end,
	table = function(t, literal, indent, printed)
		if printed[t] then
			return tostring(t)
		else
			printed[t] = true
		end

		local s = "{"
		local indent = indent or 1
		for i = 1, #t do
			s = s .. "\n" .. string.rep("\t", indent) .. ToString(t[i], true, indent + 1, printed) .. ","
		end

		for k, v in pairs(t) do
			if type(k) ~= "number" or k > #t then
				s = s .. "\n" .. string.rep("\t", indent) .. (
					type(k) == "string" and
						k
					or
						"[" .. ToString(k, true, indent + 1, printed) .. "]"
					) .. " = " .. ToString(v, true, indent + 1, printed) .. ", "
			end
		end

		return string.sub(tostring(t), 8) .. ":" .. s .. "\n" .. string.rep("\t", indent-1) .. "}"
	end,
	cdata = function(v, literal)
		if v.isa then
			if v:isa "Vector" then
				return cdata_types.Vector(v, literal)
			elseif v:isa "Color" then
				return cdata_types.Color(v, literal)
			elseif v:isa "Angles" then
				return cdata_types.Angles(v, literal)
			elseif v:isa "Coords" then
				return cdata_types.Coords(v, literal)
			end
		else
			return tostring(v)
		end
	end,
	userdata = function(u, literal)
		local meta = getmetatable(u)
		if type(meta) ~= "table" then
			return tostring(u)
		elseif meta.__towatch then
			return ToString(meta.__towatch(u), literal)
        else
            return "(" .. tostring(meta) .. "):(" .. tostring(u) .. ")"
        end
	end
}
table.tostring = types.table

function CoordsToString(coords, coordsName)
    local name = ConditionalValue(coordsName ~= nil, tostring(coordsName), "Coords ")
    return StringFormat("%s{ origin: (%0.2f, %0.2f, %0.2f) xAxis: (%0.2f, %0.2f, %0.2f) yAxis: (%0.2f, %0.2f, %0.2f) zAxis: (%0.2f, %0.2f, %0.2f) }",
                            name, coords.origin.x, coords.origin.y, coords.origin.z,
                            coords.xAxis.x, coords.xAxis.y, coords.xAxis.z,
                            coords.yAxis.x, coords.yAxis.y, coords.yAxis.z,
                            coords.zAxis.x, coords.zAxis.y, coords.zAxis.z)
end

function ToString(v, literal, indentation, printed)
	local meta = getmetatable(v)
	if meta and meta.__tostring then
		return meta.__tostring(v)
	end

	local entry = types[type(v)]
	if entry then
		return entry(v, literal, indentation, printed or {})
	else
		return tostring(v)
	end
end

debug.traceback = function(message, level)
	if not level then
		level = message and message + 1 or 2
		message = ""
	end
	local str = "Call stack:"
	local i = level
	local func = debug.getinfo(i)
	while func do
		str = str .. ("\n\t#%d: %s:%i%s:%i"):format(i-level+1, func.name, func.currentline, func.source, func.linedefined)
		local j = 1
		local name, value = debug.getlocal(i, j)
		while name do
			str = str .. ("\n\t\t%s = %s"):format(name, ToString(value, 3))
			j = j + 1
			name, value = debug.getlocal(i, j)
		end
		i = i + 1
		func = debug.getinfo(i)
	end
	return message .. "\n" .. str
end

modEntry = {}
